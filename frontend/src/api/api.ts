/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface PaginatedResponseProjectRead
 */
export interface PaginatedResponseProjectRead {
    /**
     * 
     * @type {Pagination}
     * @memberof PaginatedResponseProjectRead
     */
    'pagination': Pagination;
    /**
     * 
     * @type {Array<ProjectRead>}
     * @memberof PaginatedResponseProjectRead
     */
    'items': Array<ProjectRead>;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'page_number': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'page_size': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'total': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'item_count': number;
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    'total_pages': number;
}
/**
 * プロジェクト作成
 * @export
 * @interface ProjectCreate
 */
export interface ProjectCreate {
    /**
     * プロジェクト名
     * @type {string}
     * @memberof ProjectCreate
     */
    'project_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectCreate
     */
    'project_description'?: string | null;
    /**
     * 開始時間 (HH:mm)
     * @type {string}
     * @memberof ProjectCreate
     */
    'start_time': string;
    /**
     * 終了時間 (HH:mm)
     * @type {string}
     * @memberof ProjectCreate
     */
    'end_time': string;
    /**
     * 休憩開始時間 (HH:mm)
     * @type {string}
     * @memberof ProjectCreate
     */
    'start_break_time': string;
    /**
     * 休憩終了時間 (HH:mm)
     * @type {string}
     * @memberof ProjectCreate
     */
    'end_break_time': string;
    /**
     * 更新キー（0〜9999）
     * @type {number}
     * @memberof ProjectCreate
     */
    'update_key': number;
    /**
     * 作成者
     * @type {string}
     * @memberof ProjectCreate
     */
    'created_by': string;
    /**
     * 更新者
     * @type {string}
     * @memberof ProjectCreate
     */
    'updated_by': string;
}
/**
 * Project詳細(Excelフォーマット情報を含む)
 * @export
 * @interface ProjectDetailRead
 */
export interface ProjectDetailRead {
    /**
     * プロジェクトID
     * @type {number}
     * @memberof ProjectDetailRead
     */
    'project_id': number;
    /**
     * プロジェクト名
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'project_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'project_description'?: string | null;
    /**
     * 開始時間
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'start_time': string;
    /**
     * 終了時間
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'end_time': string;
    /**
     * 休憩開始時間
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'start_break_time': string;
    /**
     * 休憩終了時間
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'end_break_time': string;
    /**
     * 更新キー（0〜9999）
     * @type {number}
     * @memberof ProjectDetailRead
     */
    'update_key': number;
    /**
     * 作成日時
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'created_at': string;
    /**
     * 作成者
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'created_by': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'updated_at': string;
    /**
     * 更新者
     * @type {string}
     * @memberof ProjectDetailRead
     */
    'updated_by': string;
    /**
     * 
     * @type {ProjectExcelFormatRead}
     * @memberof ProjectDetailRead
     */
    'excel_format'?: ProjectExcelFormatRead | null;
}
/**
 * Excelフォーマット情報
 * @export
 * @interface ProjectExcelFormatRead
 */
export interface ProjectExcelFormatRead {
    /**
     * 
     * @type {number}
     * @memberof ProjectExcelFormatRead
     */
    'project_id': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectExcelFormatRead
     */
    'date_type': number;
    /**
     * 
     * @type {number}
     * @memberof ProjectExcelFormatRead
     */
    'start_line': number;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'date_col': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'date_format': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'start_date_col': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'end_date_col': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectExcelFormatRead
     */
    'is_tested': boolean;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'created_by': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectExcelFormatRead
     */
    'updated_by': string;
}
/**
 * プロジェクト情報
 * @export
 * @interface ProjectRead
 */
export interface ProjectRead {
    /**
     * プロジェクトID
     * @type {number}
     * @memberof ProjectRead
     */
    'project_id': number;
    /**
     * プロジェクト名
     * @type {string}
     * @memberof ProjectRead
     */
    'project_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectRead
     */
    'project_description'?: string | null;
    /**
     * 開始時間
     * @type {string}
     * @memberof ProjectRead
     */
    'start_time': string;
    /**
     * 終了時間
     * @type {string}
     * @memberof ProjectRead
     */
    'end_time': string;
    /**
     * 休憩開始時間
     * @type {string}
     * @memberof ProjectRead
     */
    'start_break_time': string;
    /**
     * 休憩終了時間
     * @type {string}
     * @memberof ProjectRead
     */
    'end_break_time': string;
    /**
     * 更新キー（0〜9999）
     * @type {number}
     * @memberof ProjectRead
     */
    'update_key': number;
    /**
     * 作成日時
     * @type {string}
     * @memberof ProjectRead
     */
    'created_at': string;
    /**
     * 作成者
     * @type {string}
     * @memberof ProjectRead
     */
    'created_by': string;
    /**
     * 更新日時
     * @type {string}
     * @memberof ProjectRead
     */
    'updated_at': string;
    /**
     * 更新者
     * @type {string}
     * @memberof ProjectRead
     */
    'updated_by': string;
}
/**
 * プロジェクト更新（PUT）用スキーマ。全項目必須で更新します。
 * @export
 * @interface ProjectUpdate
 */
export interface ProjectUpdate {
    /**
     * プロジェクト名
     * @type {string}
     * @memberof ProjectUpdate
     */
    'project_name': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectUpdate
     */
    'project_description'?: string | null;
    /**
     * 開始時間 (HH:mm)
     * @type {string}
     * @memberof ProjectUpdate
     */
    'start_time': string;
    /**
     * 終了時間 (HH:mm)
     * @type {string}
     * @memberof ProjectUpdate
     */
    'end_time': string;
    /**
     * 休憩開始時間 (HH:mm)
     * @type {string}
     * @memberof ProjectUpdate
     */
    'start_break_time': string;
    /**
     * 休憩終了時間 (HH:mm)
     * @type {string}
     * @memberof ProjectUpdate
     */
    'end_break_time': string;
    /**
     * 更新キー（0〜9999）
     * @type {number}
     * @memberof ProjectUpdate
     */
    'update_key': number;
    /**
     * 更新者
     * @type {string}
     * @memberof ProjectUpdate
     */
    'updated_by': string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * ProjectAPIApi - axios parameter creator
 * @export
 */
export const ProjectAPIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 新しいプロジェクトを登録する
         * @summary プロジェクト作成
         * @param {ProjectCreate} projectCreate 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProjectProjectsPost: async (projectCreate: ProjectCreate, xEmployeeId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectCreate' is not null or undefined
            assertParamExists('createNewProjectProjectsPost', 'projectCreate', projectCreate)
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xEmployeeId != null) {
                localVarHeaderParameter['x-employee-id'] = String(xEmployeeId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定IDのプロジェクトを削除します。update_keyが一致しない場合はエラーになります。
         * @summary プロジェクト削除
         * @param {number} projectId プロジェクトID
         * @param {number} updateKey 更新キー（0〜9999）
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectProjectsProjectIdDelete: async (projectId: number, updateKey: number, xEmployeeId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProjectProjectsProjectIdDelete', 'projectId', projectId)
            // verify required parameter 'updateKey' is not null or undefined
            assertParamExists('deleteProjectProjectsProjectIdDelete', 'updateKey', updateKey)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (updateKey !== undefined) {
                localVarQueryParameter['update_key'] = updateKey;
            }


    
            if (xEmployeeId != null) {
                localVarHeaderParameter['x-employee-id'] = String(xEmployeeId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトIDで詳細取得
         * @summary プロジェクト詳細取得
         * @param {number} projectId プロジェクトID
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectDetailProjectsProjectIdGet: async (projectId: number, xEmployeeId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectDetailProjectsProjectIdGet', 'projectId', projectId)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            if (xEmployeeId != null) {
                localVarHeaderParameter['x-employee-id'] = String(xEmployeeId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * プロジェクトIDや名前で絞り込み・ページング対応
         * @summary プロジェクト一覧取得
         * @param {number | null} [projectId] 
         * @param {string | null} [projectName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsProjectsGet: async (projectId?: number | null, projectName?: string | null, pageNumber?: number, pageSize?: number, xEmployeeId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/projects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (projectId !== undefined) {
                localVarQueryParameter['project_id'] = projectId;
            }

            if (projectName !== undefined) {
                localVarQueryParameter['project_name'] = projectName;
            }

            if (pageNumber !== undefined) {
                localVarQueryParameter['page_number'] = pageNumber;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            if (xEmployeeId != null) {
                localVarHeaderParameter['x-employee-id'] = String(xEmployeeId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 指定IDのプロジェクトを更新する
         * @summary プロジェクト更新
         * @param {number} projectId プロジェクトID
         * @param {ProjectUpdate} projectUpdate 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingProjectProjectsProjectIdPut: async (projectId: number, projectUpdate: ProjectUpdate, xEmployeeId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('updateExistingProjectProjectsProjectIdPut', 'projectId', projectId)
            // verify required parameter 'projectUpdate' is not null or undefined
            assertParamExists('updateExistingProjectProjectsProjectIdPut', 'projectUpdate', projectUpdate)
            const localVarPath = `/projects/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xEmployeeId != null) {
                localVarHeaderParameter['x-employee-id'] = String(xEmployeeId);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(projectUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectAPIApi - functional programming interface
 * @export
 */
export const ProjectAPIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectAPIApiAxiosParamCreator(configuration)
    return {
        /**
         * 新しいプロジェクトを登録する
         * @summary プロジェクト作成
         * @param {ProjectCreate} projectCreate 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewProjectProjectsPost(projectCreate: ProjectCreate, xEmployeeId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewProjectProjectsPost(projectCreate, xEmployeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectAPIApi.createNewProjectProjectsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定IDのプロジェクトを削除します。update_keyが一致しない場合はエラーになります。
         * @summary プロジェクト削除
         * @param {number} projectId プロジェクトID
         * @param {number} updateKey 更新キー（0〜9999）
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProjectProjectsProjectIdDelete(projectId: number, updateKey: number, xEmployeeId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProjectProjectsProjectIdDelete(projectId, updateKey, xEmployeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectAPIApi.deleteProjectProjectsProjectIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * プロジェクトIDで詳細取得
         * @summary プロジェクト詳細取得
         * @param {number} projectId プロジェクトID
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectDetailProjectsProjectIdGet(projectId: number, xEmployeeId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDetailRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectDetailProjectsProjectIdGet(projectId, xEmployeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectAPIApi.getProjectDetailProjectsProjectIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * プロジェクトIDや名前で絞り込み・ページング対応
         * @summary プロジェクト一覧取得
         * @param {number | null} [projectId] 
         * @param {string | null} [projectName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectsProjectsGet(projectId?: number | null, projectName?: string | null, pageNumber?: number, pageSize?: number, xEmployeeId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseProjectRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectsProjectsGet(projectId, projectName, pageNumber, pageSize, xEmployeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectAPIApi.getProjectsProjectsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 指定IDのプロジェクトを更新する
         * @summary プロジェクト更新
         * @param {number} projectId プロジェクトID
         * @param {ProjectUpdate} projectUpdate 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateExistingProjectProjectsProjectIdPut(projectId: number, projectUpdate: ProjectUpdate, xEmployeeId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateExistingProjectProjectsProjectIdPut(projectId, projectUpdate, xEmployeeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectAPIApi.updateExistingProjectProjectsProjectIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectAPIApi - factory interface
 * @export
 */
export const ProjectAPIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectAPIApiFp(configuration)
    return {
        /**
         * 新しいプロジェクトを登録する
         * @summary プロジェクト作成
         * @param {ProjectCreate} projectCreate 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProjectProjectsPost(projectCreate: ProjectCreate, xEmployeeId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectRead> {
            return localVarFp.createNewProjectProjectsPost(projectCreate, xEmployeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定IDのプロジェクトを削除します。update_keyが一致しない場合はエラーになります。
         * @summary プロジェクト削除
         * @param {number} projectId プロジェクトID
         * @param {number} updateKey 更新キー（0〜9999）
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProjectProjectsProjectIdDelete(projectId: number, updateKey: number, xEmployeeId?: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProjectProjectsProjectIdDelete(projectId, updateKey, xEmployeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトIDで詳細取得
         * @summary プロジェクト詳細取得
         * @param {number} projectId プロジェクトID
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectDetailProjectsProjectIdGet(projectId: number, xEmployeeId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectDetailRead> {
            return localVarFp.getProjectDetailProjectsProjectIdGet(projectId, xEmployeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * プロジェクトIDや名前で絞り込み・ページング対応
         * @summary プロジェクト一覧取得
         * @param {number | null} [projectId] 
         * @param {string | null} [projectName] 
         * @param {number} [pageNumber] 
         * @param {number} [pageSize] 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectsProjectsGet(projectId?: number | null, projectName?: string | null, pageNumber?: number, pageSize?: number, xEmployeeId?: string, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedResponseProjectRead> {
            return localVarFp.getProjectsProjectsGet(projectId, projectName, pageNumber, pageSize, xEmployeeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 指定IDのプロジェクトを更新する
         * @summary プロジェクト更新
         * @param {number} projectId プロジェクトID
         * @param {ProjectUpdate} projectUpdate 
         * @param {string} [xEmployeeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateExistingProjectProjectsProjectIdPut(projectId: number, projectUpdate: ProjectUpdate, xEmployeeId?: string, options?: RawAxiosRequestConfig): AxiosPromise<ProjectRead> {
            return localVarFp.updateExistingProjectProjectsProjectIdPut(projectId, projectUpdate, xEmployeeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectAPIApi - object-oriented interface
 * @export
 * @class ProjectAPIApi
 * @extends {BaseAPI}
 */
export class ProjectAPIApi extends BaseAPI {
    /**
     * 新しいプロジェクトを登録する
     * @summary プロジェクト作成
     * @param {ProjectCreate} projectCreate 
     * @param {string} [xEmployeeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAPIApi
     */
    public createNewProjectProjectsPost(projectCreate: ProjectCreate, xEmployeeId?: string, options?: RawAxiosRequestConfig) {
        return ProjectAPIApiFp(this.configuration).createNewProjectProjectsPost(projectCreate, xEmployeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定IDのプロジェクトを削除します。update_keyが一致しない場合はエラーになります。
     * @summary プロジェクト削除
     * @param {number} projectId プロジェクトID
     * @param {number} updateKey 更新キー（0〜9999）
     * @param {string} [xEmployeeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAPIApi
     */
    public deleteProjectProjectsProjectIdDelete(projectId: number, updateKey: number, xEmployeeId?: string, options?: RawAxiosRequestConfig) {
        return ProjectAPIApiFp(this.configuration).deleteProjectProjectsProjectIdDelete(projectId, updateKey, xEmployeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトIDで詳細取得
     * @summary プロジェクト詳細取得
     * @param {number} projectId プロジェクトID
     * @param {string} [xEmployeeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAPIApi
     */
    public getProjectDetailProjectsProjectIdGet(projectId: number, xEmployeeId?: string, options?: RawAxiosRequestConfig) {
        return ProjectAPIApiFp(this.configuration).getProjectDetailProjectsProjectIdGet(projectId, xEmployeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * プロジェクトIDや名前で絞り込み・ページング対応
     * @summary プロジェクト一覧取得
     * @param {number | null} [projectId] 
     * @param {string | null} [projectName] 
     * @param {number} [pageNumber] 
     * @param {number} [pageSize] 
     * @param {string} [xEmployeeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAPIApi
     */
    public getProjectsProjectsGet(projectId?: number | null, projectName?: string | null, pageNumber?: number, pageSize?: number, xEmployeeId?: string, options?: RawAxiosRequestConfig) {
        return ProjectAPIApiFp(this.configuration).getProjectsProjectsGet(projectId, projectName, pageNumber, pageSize, xEmployeeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 指定IDのプロジェクトを更新する
     * @summary プロジェクト更新
     * @param {number} projectId プロジェクトID
     * @param {ProjectUpdate} projectUpdate 
     * @param {string} [xEmployeeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectAPIApi
     */
    public updateExistingProjectProjectsProjectIdPut(projectId: number, projectUpdate: ProjectUpdate, xEmployeeId?: string, options?: RawAxiosRequestConfig) {
        return ProjectAPIApiFp(this.configuration).updateExistingProjectProjectsProjectIdPut(projectId, projectUpdate, xEmployeeId, options).then((request) => request(this.axios, this.basePath));
    }
}



